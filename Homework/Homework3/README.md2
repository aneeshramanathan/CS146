MATRIX_MULTIPLY(A, B): 
  if columns(A) ≠ rows(B):                                           1
    raise ValueError("Matrix multiplication is not defined.")        1

  rows_A ← number of rows in A                                       1
  cols_A ← number of columns in A                                    1 
  cols_B ← number of columns in B                                    1 
  result ← matrix of size rows_A x cols_B filled with zeros          1 

  for i from 1 to rows_A do:                                         N+1
    for j from 1 to cols_B do:                                       N(N+1)
      sum ← 0                                                          N(N)
      for k from 1 to cols_A do:                                       (N+1)(N+1)(N)
        sum ← sum + A[i][k] * B[k][j]                                  N(N)(N)
    result[i][j] ← sum return result                                 N


The time complexity for this code is N^3. This is because the our loop runs for row_A iterations and the first inner loop runs for cols_B iterations 
and the last nested for loop runs for cols_A. The third loop is nested inside the second loop which means that you have to multiple that by the 
iterations of the first two loops. The highest power after you add up all the values is N^3 therefore the time complexity would be N^3 for
this specific program.
